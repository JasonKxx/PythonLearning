# 119 Deleveloper fundamentals

class PlayerCharacter:
    def __init__(self, name, age):
        self.name = name
        self.age = age

    def run(self):
        return (f'Hi sir my name is {self.name} and my old is {self.age}')


player1 = PlayerCharacter('Jason', 33)

print(player1.run())

# 120 Encapsulation
# encapsulation is the binding of data and functions that manipulate that data and
# but using this way I'm combining things packaging things up into those instances

# 121 Abstraction
# player1.speak = 'BOOOO'
# Any programmer can come along and just remove all my hard work and overwrite it like that.
# 122 Private vs Public Variables

class PlayerCharacter:
    # So once again this double underscore is also a convention to let people know you shouldn't really touch
    def __init__(self, name, age):
        self._name = name
        self._age = age

    def speak(self):
        print(f'My name is {self.name} and I am {self.age} years old')


Player1 = PlayerCharacter('Jason', 77)

print(Player1.speak())

# We determined that hey if we see underscore in our code that most likely means that this should be a private variable

# 123 Inheritance
# Inheritance allows new objects to take on the properties of existing objects.
class User():
    def sign_in(self):
        print('logged in')


class Wizard(User):  # I inherited from the user class this functionality
    def __init__(self, name, power):
        self.name = name
        self.power = power

    def attack(self):
        print(f'attacking with power of {self.power}')


class Archer(User):
    def __init__(self, name, num_arrows):
        self.name = name
        self.num_arrows = num_arrows

    def attack(self):
        print(f'attacking with arrows left- {self.num_arrows}')


wizard1 = Wizard('Merlin', 50)
archer1 = Archer('Robin', 500)

wizard1.attack()
archer1.attack()

# inheritance2
# Inheritance allows new objects to take on the properties of existing objects.
class User(object):
    def sign_in(self):
        print('logged in')


class Wizard(User):  # I inherited from the user class this functionality
    def __init__(self, name, power):
        self.name = name
        self.power = power

    def attack(self):
        print(f'attacking with power of {self.power}')


class Archer(User):
    def __init__(self, name, num_arrows):
        self.name = name
        self.num_arrows = num_arrows

    def attack(self):
        print(f'attacking with arrows left- {self.num_arrows}')


wizard1 = Wizard('Merlin', 50)
archer1 = Archer('Robin', 500)

wizard1.attack()
archer1.attack()

# wizard1 is an instance of wizard that is true
print(isinstance(wizard1, Wizard))
# because we've had to run this class to create wizard 1
print(isinstance(wizard1, User))

# 125 polymorphism
class User(object):
    def sign_in(self):
        print('logged in')

    def attack(self):
        print('do nothing')


class Wizard(User):  # I inherited from the user class this functionality
    def __init__(self, name, power):
        self.name = name
        self.power = power

    def attack(self):
        User.attack(self) # you can use attack methon from Class User
        print(f'attacking with power of {self.power}')


class Archer(User):
    def __init__(self, name, num_arrows):
        self.name = name
        self.num_arrows = num_arrows

    def attack(self):
        print(f'attacking with arrows left- {self.num_arrows}')


wizard1 = Wizard('Merlin', 50)
archer1 = Archer('Robin', 500)


def player_attack(char):
    char.attack()


# If I do player attack have Archer in here if I click Run you see that the same function gives me a different output
# even though we're calling the same thing
player_attack(wizard1)
player_attack(archer1)

for char in [wizard1, archer1]:
    char.attack()

# 126 Exercise:Pets Everywhere
class Pets():
    animals = []

    def __init__(self, animals):
        self.animals = animals

    def walk(self):
        for animal in self.animals:
            print(animal.walk())


class Cat():
    is_lazy = True

    def __init__(self, name, age):
        self.name = name
        self.age = age

    def walk(self):
        return f'{self.name} is just walking around'


class Simon(Cat):
    def sing(self, sounds):
        return f'{sounds}'


class Sally(Cat):
    def sing(self, sounds):
        return f'{sounds}'

# 1 Add another Cat


class Sharly(Cat):
    def sing(self, sounds):
        return f'{sounds}'


# 2 Create a list of all of the pets (create 3 cat instances from the above)
my_cats = [Simon('Simon', 4), Sally('Sally', 11), Sharly('Sharly', 9)]

# 3 Instantiate the Pet class with all your cats use variable my_pets
my_pets = pets(my_cats)
# 4 Output all of the cats walking using the my_pets instance
my_pets.walk()


# 127 Super()
class User(object):
    def __init__(self, email):
        self.email = email

    def sign_in(self):
        print('logged in')


class Wizard(User):  # I inherited from the user class this functionality
    def __init__(self, name, power, email):
        # User.__init__(self, email)#called User.__init__funcation and passed in the email that we passed in as an argument
        # run super and super is referring to the superclass or the class above wizard which is user and this
        # So our code looks even cleaner and all we pass is this and if we click Run
        # super allows us to refer to user this way and not have to worry about passing self
        super().__init__(email)
        self.name = name
        self.power = power

    def attack(self):
        print(f'attacking with power of {self.power}')


wizard1 = Wizard('Merlin', 50, 'Merlin@gmail.com')
print(wizard1.sign_in())
print(wizard1.attack())
print(wizard1.email)


# 128introspection
# means ability to determine the type of an object at runtime

print(dir(wizard1))

# We have a lot of these Dunder or magic methods that we haven't really talked about.

# 129 Dunder magic methods
class Toy():
    def __init__(self, color, age):
        self.color = color
        self.age = age
        self.my_item = {
            'Book': 'HarryPoter',
            'serise': 6
        }

    def __str__(self):
        return f'{self.color}'

    def __len__(self):
        return 5

    def __del__(self):
        print('deleted the action_figure object!')

    def __call__(self):
        return 'Yess call'

    def __getitem__(self, i):
        return self.my_item[i]


action_figure = Toy('Red', 10)
print(action_figure.__str__())  # return action_figure.__str__ self.color
print(str(action_figure))  # the same return action_figure.__str__ self.color
print(len(action_figure))  # return action_figure.__len__ 5
print(action_figure())  # return __call__ meth
print(action_figure['Book'])  # return object Toy self.my_item index 'Book'
#del action_figure

