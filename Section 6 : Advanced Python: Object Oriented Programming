111# What is OOP
Everything here is an object because in Python everything is built by this class keyword
to use different methods on our objects

The main takeaway is that OOP is a paradigm a way to think about our code a way for us to structure

112# What is OOP? Part2

#OOP

class BigObject: #Class
    pass
obj1 = BigObject()#instanciate
obj1 = BigObject()#instanciate
obj1 = BigObject()#instanciate

113# 

class PlayerCharacter:  # Create a Object
    def __init__(self, name, age):  # __inti__This is called a Dunder method or a magic method, I want self dot name to equal whatever the parameter name
        # This is a way for us to define well self self refers to the player character
        self.name = name #because self refer to player1
        self.age = age

    def run(self):
        # we get this not because remember this is a function that doesn't return anything
        print('run')
        return 'done'


# remember instantiate means is we're calling the class to create an object
player1 = PlayerCharacter('Jason')
player2 = PlayerCharacter('Cindy')
print(player1.name)
print(player2.run())
print(type(player1))

114#
player1 = PlayerCharacter('Jason', 36)
help(player1)
Help on PlayerCharacter in module __main__ object:

class PlayerCharacter(builtins.object)
 |  PlayerCharacter(name, age)
 |
 |  # 112_OOP
 |
 |  Methods defined here:
 |
 |  __init__(self, name, age)
 |      Initialize self.  See help(type(self)) for accurate signature.
 |
 |  run(self)
 |
 |  ----------------------------------------------------------------------
 |  Data descriptors defined here:
 |
 |  __dict__
 |      dictionary for instance variables (if defined)
 |
 |  __weakref__
 |      list of weak references to the object (if defined)

help(list)

 |
 |  __ge__(self, value, /)
 |      Return self>=value.
 |
 |  __getattribute__(self, name, /)
 |      Return getattr(self, name).
 |
 |  __getitem__(...)
 |      x.__getitem__(y) <==> x[y]
 |
 |  __gt__(self, value, /)
 |      Return self>value.
 |
 |  __iadd__(self, value, /)
 |      Implement self+=value.
 |
 |  __imul__(self, value, /)
 |      Implement self*=value.
 |
 |  __init__(self, /, *args, **kwargs)
 |      Initialize self.  See help(type(self)) for accurate signature.
 |
 |  __iter__(self, /)
 |      Implement iter(self).
 |
 |  __le__(self, value, /)
 |      Return self<=value.
 |
 |  __len__(self, /)
 |      Return len(self).
 |
 |  __lt__(self, value, /)
 |      Return self<value.
 |
 |  __mul__(self, value, /)
 |      Return self*value.
 |
 |  __ne__(self, value, /)
 |      Return self!=value.
 |
 |  __repr__(self, /)
 |      Return repr(self).
 |
 |  __reversed__(self, /)
 |      Return a reverse iterator over the list.
 |
 |  __rmul__(self, value, /)
 |      Return value*self.
 |
 |  __setitem__(self, key, value, /)
 |      Set self[key] to value.
 |
 |  __sizeof__(self, /)
 |      Return the size of the list in memory, in bytes.
 |
 |  append(self, object, /)
 |      Append object to the end of the list.
 |
 |  clear(self, /)
 |      Remove all items from list.
 |
 |  copy(self, /)
 |      Return a shallow copy of the list.
 |
 |  count(self, value, /)
 |      Return number of occurrences of value.
 |
 |  extend(self, iterable, /)
 |      Extend list by appending elements from the iterable.
 |
 |  index(self, value, start=0, stop=2147483647, /)
 |      Return first index of value.
 |
 |      Raises ValueError if the value is not present.
 |
 |  insert(self, index, object, /)
 |      Insert object before index.
 |
 |  pop(self, index=-1, /)
 |      Remove and return item at index (default last).
 |
 |      Raises IndexError if list is empty or index is out of range.
 |
 |  remove(self, value, /)
 |      Remove first occurrence of value.
 |
 |      Raises ValueError if the value is not present.
 |
 |  reverse(self, /)
 |      Reverse *IN PLACE*.
 |
 |  sort(self, /, *, key=None, reverse=False)
 |      Sort the list in ascending order and return None.
 |
 |      The sort is in-place (i.e. the list itself is modified) and stable (i.e. the
 |      order of two equal elements is maintained).
 |
 |      If a key function is given, apply it once to each list item and sort them,
 |      ascending or descending, according to their function values.
 |
 |      The reverse flag can be set to sort in descending order.
 |
 |  ----------------------------------------------------------------------
 |  Static methods defined here:
 |
 |  __new__(*args, **kwargs) from builtins.type
 |      Create and return a new object.  See help(type) for accurate signature.
 |
 |  ----------------------------------------------------------------------
 |  Data and other attributes defined here:
 |
 |  __hash__ = None
 
 # 114 Attributes and Methods OOP is allows us to write code that is repeatable well organized and also memory efficient right
class PlayerCharacter:  # Create a Object
    # Class Object Attribute
    # Static Attribute This is going to be true and exist for all objects
    membership = True

    def __init__(self, name, age):  # __inti__This is called a Dunder method or a magic method, I want self dot name to equal whatever the parameter name
        if (self.membership):  # (PlayerCharacter.membership) # remember self refers to this player character so that if I run this
            # This is a way for us to define well self self refers to the player character
            # because self refer to player1
            self.name = name            # attributes
            self.age = age

    def shout(self):
        # we get this not because remember this is a function that doesn't return anything
        print(f'my name is {self.name}')

    def run(self, king):
        print(f'my name is {self.name}')
    # return 'done'


# remember instantiate means is we're calling the class to create an object
player1 = PlayerCharacter('Jason', 36)
player2 = PlayerCharacter('Cindy', 33)
print(player1.run("king"))
print(player2.shout())

# print(type(player1))
