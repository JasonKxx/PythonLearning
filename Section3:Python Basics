20 #Math Functions
https://docs.python.org/2/library/math.html

22 #operator precedence

# ()
# **
# */
# +-

23#Exercise:Operator Precedence

https://repl.it/@aneagoie/Operator-Precedence#main.py

hroughout the course, we will have many exercises to help you learn. Moving forward, these exercises will be attached to each video (if it has an exercise) which can be accessed in your Udemy video player under "resources". To get you comfortable using this feature, and the online Repl.it we are going to use, you can see the exercise for this lesson attached. Good luck and see you in the next video!

For more information: 

https://support.udemy.com/hc/en-us/articles/229603648-How-to-Access-And-Use-The-Course-Player

24# Option :bin() and complex
print(bin(5))
print(int('0b101', 2))
https://www.geeksforgeeks.org/python-int-function/


25#Variables
Python Keywords
https://www.w3schools.com/python/python_ref_keywords.asp
#constants

26# Expressions vs Statements

27# Augmented Assignment Operator
some_value = 5
some_value = some_value+2
some_value += 3

28#Strings

long_string = '''
ww
wer
twr
'''
print(long_string)
#So the three single quotes is four long strings that I can keep going on multiple lines for example.

29#String Concatenation
print(' Hello '+'Jason')

30#Type Conversion
print(str(100))
print(int(str(100)))

a= str(100)
b= int(a)
c= type(b)
print(c)
print(b)

31#Escape Sequences
weather = "\t It\'s \"kind of \" sunny" \n hope you have a good day!!
\t tab
\n new line
\ it is going to say all right whatever comes after this I recognize this symbol whatever comes after

32# Formatted Strings

name = 'Jason'
age = 37

This is a new feature of Python 3 by adding F to the beginning
f : It's saying hey this is going to be a formatted string and I want you to just make these variables available

print(f'hi {name}. You are{age} years old')
print(' hi {}. You are {} years old'.format('Jason','37'))
print(' hi {}. You are {} years old'.format('name','age'))
print(' hi {1}. You are {0} years old'.format('name','age'))
print(' hi {new_name}. You are {age} years old'.format(new_name='Cindy',age=15))

33#String Indexes
Because one of the most useful things you can do with strings is to access different part of a string
selfish = '012345678910'
print(selfish[3])
# [start:stop]
print(selfish[0:5])
# [start:stop:stepover]
print(selfish[0:9:3])

print(selfish[1:])
So the default is going to say go all the way to the end
print(selfish[:5]
So it starts as default zero and goes to five OK
pring(selfish[::1])
it's starting at zero when there's nothing.It ends whenever the string ends when there's nothing And then we're stepping over through it once
print(selfish[-1])
Let's find out I get 10 in Python the negative index means Hey start at the end of the string
print(selfish[::-1]）
So this is a very useful notation if you want to let's say reverse an order and if we want to let's
print(selfish[::-2]）
say skip by two click Run and you see that we're skipping by two now now hopeful your head doesn't hurt

34#immutability

selfish = '01234567'
selfish[0]='8'
print(selfish)
That is I cannot change the value of this Once it's created I can't just immediately change it to eight.
But for now just remember that you can't reassign part of a string

selfish=selfish+'8'
print(selfish)

35#Buile-in Functions+ Methods
https://docs.python.org/3/library/functions.html
https://www.w3schools.com/python/python_ref_string.asp

greet = 'hellloooo'
print(greet[0:len(greet)])

quote ='to be or not to be'
print(quote.upper())
print(quote.capitalize())
You see that it capitalizes the beginning of the sentence 
print(quote.find('be'))
print(quote.replace('be', 'me'))

36# Booleans
print(bool(0)) False
print(bool(1)) True

37# Exercise:Type Conversion
38# Developer fundamentals:II
https://realpython.com/python-comments-guide/
Python Commenting Best Practices

39#Exercise:Password Checker
username = input('Please inpute your name :')
password = input('Please input PWD :')

password_length = len(password)
hidden_password = '*' * password_length
print(f'{username}, your password,{hidden_password}, is {password_length} letter long')

40#List
It's called list and list is an ordered sequence of objects that can be of any type.
new_list = ['a', 'b', 'c']
print(new_list[1])
print(new_list[-2])
print(new_list[1:3])
new_list[0] = 'z'
print(new_list)

my_list = [1,2,3]
bonus = my_list + [5]
my_list[0] = 'z'
print(my_list)
print(bonus)

41#List Slicing
costco_cart = [
  'fruit',
  'chocolate',
  'Tv',
  'drink'
]
costco_cart[0]='water'
new_cart = costco_cart 
# this is important if you don't want costco_cart and new_cart use the same memory please use costco_cart[:]
#i wamt create a copy use list slicing to copy this costco_cart cart and it's going to equal new cart so that now if I run
new_cart[0]='why'
print(costco_cart)
print(new_cart)

42#Matrix
Well it's a two dimensional array
matrix = [
[1,2,3],
[4,5,6],
[7,8,9]
]
matrix = [
[[1],2,3],
[4,5,6],
[7,8,9]
]
#matrices come up a lot in topics like machine learning or image processing for example a computer doesn't
# using this list: 
basket = ["Banana", 
  ["Apples", ["Oranges","666"], "Blueberries"]
  ];
# access "Oranges" and print it:
# You will find the answer if you scroll down to the bottom, but attempt it yourself first!

print(basket[1][1][0])

43#List Methods
https://www.w3schools.com/python/python_ref_list.asp

basket = [1,2,3,4,5]
#Adding
basket.insert(5, 100) #insert value after
basket.append(100) #add a value to end of list
basket.extend([100, 101]) #add value to end of list
new_list = basket

basket =[1,2,3,4,5]
basket.append(100)
print(basket)

new_list = basket
basket.insert(6,101)
print(new_list)

#removing
basket.pop()
basket.pop(1) #remove index
basket.remove(5) %remove value
#so remove we give it the value that we want to remove with Pop we give it the index that we want to
new_list = basket.pop(4) #return basket index number 4
print(new_list)
new_list = basket.clear()

44#List Methods2
basket = ['a','b','c','d','e']
basket.index(2) 
print('d' in basket)
print('i' in 'hi i am a enigger')
print(basket.count('d'))

45#List methods3
basket = ['a','b','c','d','e']
#basket.sort()
print(sorted(basket))
basket.reverse()
basket.
46# Common List patterns
basket = ['a','x','b','c','d','e','d']
basket.sort()
basket.reverse()
print(basket[::-1])
ptint(list(range(1,100)))
.join()
actually something that works on strings it's a string method but it's often used this way.

sentence = ' '
new_sentence = sentence.join(['hi', 'my', 'name', 'is', 'Jason'])
new_sentence = ' '.join(['hi', 'my', 'name', 'is', 'Jason'])
print(new_sentence)
#fix this code so that it prints a sorted list of all of our friends (alphabetical). Scroll to see answer
friends = ['Simon', 'Patty', 'Joy', 'Carrie', 'Amira', 'Chu']

new_friend = ['Stanley']
friends.extend(new_friend)
print(sorted(friends))

47#List Unpacking
a,b,c, *other, d= [1,2,3,4,5,6,7,8,9]
print(other)
print(d)

48#None
49#Dictionaries
dictionary = {
'a': [1,2,3],
'b': 'Hello',
'c': true
}

my_list = [
{
'a': [1,2,3],
'b': 'Hello',
'c': True
},
{
'a': [4,5,6],
'b': 'Hello',
'c': True
}
]
print(my_list[1]['b'][2])

50#Developer fundamentals III
List : maybe if you want to have a list of people and line your shop well you should probably use a list
Dictionary : maybe you have a user that is playing a game and that user has first name maybe weapons maybe that doesn't have to be ordered.
key and values in a dictionary

51#Diction Keys
dictionary = {
123: [1,2,3],
'True:'Hello',
[100]: True #If you remember can be changed right on a list
}
However most of the time ninety five ninety nine percent of the time a key for a dictionary is usually something descriptive like a string okay

52#Dictionary Methods
https://www.w3schools.com/python/python_ref_dictionary.asp
user ={
'basket':[1,2,3],
'greet':'hello'
}

print(user.get('age')) #So another good way to access a key and to see if it even exists is to use dot get
print(user.get('age',55)) # in case age doesn't exist at a default value that's really really nice

user2 = dict(key='value')
print(user2) 

53#Dictionary Methods2
user ={
'basket':[1,2,3],
'greet':'hello'
'age‘：20
}
print('age' in user.key())
user.key()
user.values()
user.item()
user.clear()
user.copy()
user.pop('age')
print(user.popitem())
user.update({'ages' : 55})

53# pratice
#Scroll down to see the answers!
#1 Create a user profile for your new game. This user profile will be stored in a dictionary with keys: 'age', 'username', 'weapons', 'is_active' and 'clan'

#2 iterate and print all the keys in the above user.

#3 Add a new weapon to your user

#4 Add a new key to include 'is_banned'. Set it to false

#5 Ban the user by setting the previous key to True

#6 create a new user2 my copying the previous user and update the age value and username value. 

#1
user = {
  'age':20,
  'username':'Jason',
  'weapons':['gun','nik','char'],
  'is_active': 'kill people',
  'clan': True
}
#2
print(user.keys())
#3
user['weapons'].append('rows')
print(user)
#4
user.update({'is_banned': False})
print(user)
#5
user['is_banned']=True
print(user)
#6
user2 = user.copy()
user2.update({'age':21,'username':'Viki'})
print(user2)

54# Tuple
https://www.w3schools.com/python/python_ref_tuple.asp
if you don't need to change the list that makes things easier because it tells other programmers
my_tuple = (1,2,3,4,5)


Attach
my_tuple = (1,2,3,4,5)
my_list  = [1,2,3,4,5,6)
myy_dict = {
'123':'num',
'aa' : 'eng'
}
my_set ={1,2,3,4,5,5,5}

55# Tuples2
56# Sets
https://www.w3schools.com/python/python_ref_set.asp
my_set ={1,2,3,4,5,5,5}
only returns the unique sets or unique items

57# Set2
my_set ={1,2,3,4,5}
your_set ={4,5,6,7,8,9,10}

print(my_set.difference(your_set)) #just display difference 差異
my_set.discard(5) #remove the my_set value number 5  if is number
my_set.difference_update(your_set) #remove 4,5 bacause update
my_set.intersection(yourr_set)# display common value 交集
my_set.isdisjoint(your_set)) #if remove 4,5 return True  because it's disjointed means these sets have nothing in common完全無交集
my_set.union(your_set) # Well union just united these sets together but removed any duplicates.顯示唯一值
my_set | your_set # the same union
my_set.intersection(your_set) #交集
my_set & your_set 同intersection

my_set ={4,5}
your_set ={4,5,6,7,8,9,10}

my_set.issubset(your_set) #return True 是否為子集合
your_set.issuperset(my_set) #return True because your set encompasses everything that my set has which is four and five homeboy
包含所有在內的值
57 #Practice
#Scroll to bottom to see solution
# You are working for the school Principal. We have a database of school students:
school = {'Bobby','Tammy','Jammy','Sally','Danny'}

#during class, the teachers take attendance and compile it into a list. 
attendance_list = ['Jammy', 'Bobby', 'Danny', 'Sally']

#using what you learned about sets, create a piece of code that the school principal can use to immediately find out who missed class so they can call the parents. (Imagine if the list had 1000s of students. The principal can use the lists generated by the teachers + the school database to use python and make his/her job easier): Find the students that miss class!
print(school.difference(attendance_list))


