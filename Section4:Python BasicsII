#Section 4 :Python BasicsII
59# Conditional Logic

is_old = True
is_licenced = True

if is_old and is_licenced:
  print(' you are old enough to drive')
elif is_licenced:
  print('you can drive now!')
else:
  print('you are not of age')
print('checkchek')

60# Indentation in python
Python on the other hand is not just for styling that would do this

61# Truth vs Falesy 
https://stackoverflow.com/questions/39983695/what-is-truthy-and-falsy-how-is-it-different-from-true-and-false
is_old = 'hello'
is_licenced = 50

print(bool(''))
print(bool(0))

62#Temary Opertor
# condition_if_true if "condtion" else condition_if_else
is_friend =True
can_message = "message allowed" if is_friend else "not allowed

63# Short Circuiting
64# Logical Operators
>
<
==
>=
<=
!=
not
print(not(True)) #return False

65#Exercise :Logical Operators
is_magician = False
is_expert = True
is_magician = False
is_expert = True

if is_magician and is_expert:
  print('you are a master magician')
elif is_magician and not is_expert:
  print('At least you\'re getting there')
elif not is_magician:
  print('You need magic powers')

66# is vs ==
Equals checks for the equality in "value" such as one two three
"IS" actually checks if the location and memory where this value is stored is the same
 
 a=[1,2,3]
 b=[1,2,3]
 print(a is b) #return flase B equals this and I check a is that B No they're created in a different memory space
 
 67# For Loops
 for item in 'Zero to Mastery'
 for item in [1,2,3,4,5] :
  for x in ['a','b','c','d']:
    print(item,x)
68#Iterables
#interable - itarable can be a list can be a dictionary can be a topple can be a set can be a string
#interated - one by one to check each item in the collection
user = {
'name': 'Golem',
'age': 5007,
'can_swim':False
}

for item in user :
for item in user.items():
for item in user.values():
for item in user.keys():
for item in 50 # 50 is a number not interable
 
 69#Exercise:Tricky Counter
 #Conter
my_list = [1,2,3,4,5,6,7,8,9,10]
count =0
for c in my_list:
  count = count + c
print(count)

70#range()
#range

#for number in range(1,10):
  #print(number)

# for number in range(1,10,3):
#   print(number)

# for number in range(10,0,-1):
#   print(number)

# for _ in range(2):
#   print(list(range(10)))
for x in range(1,10):
  for y in range(1,10):
    c=x*y
    print(f'{x}*{y}={c}')

71#enumerate()
enumerate is useful for obtaining an indexed list:
for i,char in enumerate(list(range(100))):
  if char==50:
    print(f'index of 50 is :{i}')

72#While Loops
i = 0
while i < 50:
  print(i)
  #i = i + 1
  i += 1
  #break
else:
  print(f'done with all the work :{i}')
73# While Loops2
while True:
  reponse = input('please in put something :')
  if (reponse == 'exit'):
    break
Only if the loop is finished doing whatever it's doing without the breaks then let's take a break and

74# break, continue pass
When we use the "break" segment it breaks out of the current and closing loop
it however with a "continue" what we're saying is hey whatever happens when you hit
Run "pass" doesn't do absolutely anything it just essentially passes
my_list =[1,2,3]
for item in my_list:
  continue

i = 0
while i<len(my_list):
  print(my_list[i])
  i += 1

75# Our First GUI
end:   string appended after the last value, default a newline
I don't want a new line I just want well a string but an empty string and same over here
But I also want to add a line between the lists of rows
picture = [
  [0,0,0,1,0,0,0],
  [0,0,1,1,1,0,0],
  [0,1,0,1,0,1,0],
  [1,1,1,1,1,1,1],
  [0,0,0,1,0,0,0],
  [0,0,0,1,0,0,0],
]

for row in picture:
  for pixel in row:
    if (pixel == 1):
      print('*', end='') #end='' 表示每個元素執行時不換行繼續執行到最後（預設是每個元素執行完後換行)
    else:
      print(' ', end='') #end='' 表示每個元素執行時不換行繼續執行到最後（預設是每個元素執行完後換行)
  print('')# 表示每執行完一個row 即換行預設是end'\n'

76#
Developer fundamentals:IV
#clean
#readability
#predicitability
#DRY

77# Exercise:Find Duplicates
some_list = ['a','b','c','d','d','m','m','n','n']
some_list = ['a','b','c','d','d','m','m','n','n']

duplicates =[]
for value in some_list:
  if some_list.count(value) >1:
    if value not in duplicates:#找到重復值後再確認是否在duplicates list裡，如果在就不會附加到duplicates,表示只會附加一次
      duplicates.append(value)
print(duplicates)  

78#Functions
def say_hello():
  print('hellooooo')

say_hello()
79#Parameters and Arguments
So parameters are used when we define the function and arguments are used when we call the function
Arguments are used as the actual values we provide to a function

def say_hello(name, emoji): #define fuction
  print(f'hellooooo {name} {emoji}')

say_hello('Jason','Haha') #call the fuction
say_hello('Kevin','Haha')
say_hello('Jospher','Haha')

80#Default Parameters and Keyword Arguments
#parameters
#default Parameters
def say_hello(name='Jordan', emoji='XD'):
  print(f'hellooooo {name} {emoji}')

#positional arguments
say_hello('Jason','TT')
say_hello('Kevin','^^')
say_hello('Jospher','WTF')

#keyword arguments
say_hello(name='Labom', emoji='UU')
say_hello()
say_hello('Jamie')

81#Return
The functions they always have to return something and 
when they don't return anything like there's no return keyword here it automatically returns None
def sum(num1, num2):
  def another_func(n1, n2):
    return n1+n2
  return another_func(num1, num2)

#A function should do one thing really well
#A function should return something
total = sum(20,43)
print(total)

82# Exercise:Tesla
#1. Wrap the above code in a function called checkDriverAge(). Whenever you call this function, you will get prompted for age. 
# Notice the benefit in having checkDriverAge() instead of copying and pasting the function everytime?

#2 Instead of using the input(). Now, make the checkDriverAge() function accept an argument of age, so that if you enter:
#checkDriverAge(92);
#it returns "Powering On. Enjoy the ride!"
#also make it so that the default age is set to 0 if no argument is given.

def checkDriverAge(age=0):
  age = input("What is your age?: ")

  if int(age) < 18:
	  print("Sorry, you are too young to drive this car. Powering off")
  elif int(age) > 18:
  	print("Powering On. Enjoy the ride!");
  elif int(age) == 18:
	  print("Congratulations on your first year of driving. Enjoy the ride!")
checkDriverAge()

83# Methods vs Functions
Method has to be owned by something

84#Docstrings
def test(a):
  '''
  Info :this function tests and prints param a
  '''
  print(a)
#help(test)
print(test.__doc__)

your functions so that when other people on your let's say team or co-workers come across your function

85# Clean Code
# clean code
def is_even(num):
  if num % 2 ==0:
    return True
  return False

print(is_even(55))

86#*args and **Kwargs
#A star to here we're saying hey this can accept any number of positional arguments like this as many as I want
So this way we can extend and use our star args to have enough a function that can accept any number
 # *args **kwargs

# *args **kwargs

def super_func(*args, **kwargs):
  total = 0
  print(kwargs)
  for item in kwargs.values():
    total += item
  
  return sum(args) + total

print (super_func(1,2,3,4,5, num1=2, num2=10))

#Rule : params, *args, default parameters, **kwatgs

def super_func(name, *args, i='hi', **kwargs)

87# Execise:Functions
def highest_even(li):
  evens = []
  for item in li:
    if item % 2 ==0:
      evens.append(item)
  return max(evens)
print(highest_even([10,2.,4,5,6,7,234,543,342,33,413]))

88#Scope - What varibles do I have access to ?\

def some_func():
  total = 100 #only some_func() can be use
print(total) # will be fail

#Scope Rules
def parent():
  def confusion():
    return sum
  return confusion()

print(parent())
print(a)
#1- Start with locals
#2- Parent local ?
#3- Global
#4- Built in python functions

90#Global Keyword
#What varibles do I have access to ?
total = 0

def count(total):
  total +=1
  return total

print(count(count(count(total))))
#print(count(count(1)))
#print(count(2))
#print(3)

#1- Start with locals
#2- Parent local ?
#3- Global
#4- Built in python functions

91# nonlocal Key word
# Scope - what variables do I have access to?
def outer():
    x = "local"#
    def inner():
        nonlocal x #I want to jump up the scope to my parents scope my parent local and grab whatever you find in there
        x = "nonlocal" #So when we say X equals non-local we're assigning this new string and replacing this local
        print("inner:", x)
    inner()
    print("outer:", x)
outer()

#1 - start with local
#2 - Parent local?
#3 - global
#4 - built in python functions

92# Why Do we need scope?
#Memory use and crash trublesheeting

